import json

import psycopg2
import requests
import telebot
from telebot import types

from book_recommendation_system import find_similar_books
from configs import DATABASE_URL, BOT_TOKEN, GOOGLE_MAP_API_TOKEN
from exceptions import IncorrectBookIndex

connection = psycopg2.connect(DATABASE_URL)

cursor = connection.cursor()

bot = telebot.TeleBot(token=BOT_TOKEN)

main_menu_keyboard = types.ReplyKeyboardMarkup(row_width=2)
btn1 = types.KeyboardButton(text='ü™Ñ –ü–æ—Ä–∞–¥–∏—Ç–∏ –∫–Ω–∏–≥—É')
btn2 = types.KeyboardButton(text='‚ûï –î–æ–¥–∞—Ç–∏ –∫–Ω–∏–≥—É –≤ —É–ª—é–±–ª–µ–Ω—ñ')
btn3 = types.KeyboardButton(text='‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–∏–≥—É –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö')
btn4 = types.KeyboardButton(text='üîù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –∫–Ω–∏–≥')
btn5 = types.KeyboardButton(text='üèòÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ –∫–Ω–∏–∂–∫–æ–≤—ñ –º–∞–≥–∞–∑–∏–Ω–∏')
main_menu_keyboard.add(btn1, btn2, btn3, btn4, btn5)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_name = message.from_user.first_name
    chat_id = message.chat.id
    cursor.execute(f'CREATE TABLE IF NOT EXISTS ratings_{str(chat_id)}  '
                   '(id serial PRIMARY KEY, book_title VARCHAR(50), book_author VARCHAR(50), book_rating REAL)')
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç, {user_name}! üëã\n\n'
                                      f'–Ø –±–æ—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –∫–Ω–∏–∂–æ–∫. üìö\n\n'
                                      f'–ü–æ–¥—ñ–ª–∏—Å—è —Å–≤–æ—ó–º–∏ –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è–º–∏, —ñ —è –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤—É –∫–Ω–∏–≥—É, '
                                      f'–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—É. üí´\n\n'
                                      f'–¢–∏ –º–æ–∂–µ—à –æ–±—Ä–∞—Ç–∏ –æ–¥–Ω—É –∑ –º–æ—ó—Ö —Ñ—É–Ω–∫—Ü—ñ–π —É –º–µ–Ω—é –≤–Ω–∏–∑—É. üëá\n\n'
                                      f'–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–µ–Ω–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /help ‚ÑπÔ∏è',
                     reply_markup=main_menu_keyboard)


@bot.message_handler(commands=['help'])
def send_help_info(message):
    bot.send_message(message.chat.id, ...)


@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–¥–∞—Ç–∏ –∫–Ω–∏–≥—É –≤ —É–ª—é–±–ª–µ–Ω—ñ')
def add_book_to_favourite(message):
    bot_message = bot.send_message(message.chat.id,
                                   'üëå –û–∫–µ–π! üëå\n–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏, –∞–≤—Ç–æ—Ä–∞ —Ç–∞ –æ—Ü—ñ–Ω–∫—É –≤—ñ–¥ 0.0 –¥–æ 5.0.\n–ù–∞–ø—Ä: –ì–∞—Ä—ñ –ü–æ—Ç–µ—Ä, –î–∂. –ö. –†–æ–ª—ñ–Ω–≥, 4.7')
    bot.register_next_step_handler(bot_message, add_book_to_db)


def add_book_to_db(message):
    book_title, book_author, book_rating = message.text.split(',')
    chat_id = message.chat.id
    cursor.execute(
        f"INSERT INTO ratings_{str(chat_id)} (book_title, book_author, book_rating) VALUES ('{book_title}', '{book_author}', {book_rating})")
    connection.commit()
    bot.send_message(message.chat.id, f'‚úÖ –ì–æ—Ç–æ–≤–æ! ‚úÖ\n–ö–Ω–∏–≥—É *"{book_title}"* –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É '
                                      f'—É–ª—é–±–ª–µ–Ω–∏—Ö.', parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == '‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–∏–≥—É –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö')
def remove_book_from_favourite(message):
    bot_message = bot.send_message(message.chat.id, 'üëå –û–∫–µ–π! üëå\n–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏, —è–∫—É —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ–∑ —Å–ø–∏—Å–∫—É —É–ª—é–±–ª–µ–Ω–∏—Ö')
    bot.register_next_step_handler(bot_message, remove_book_from_db)


def remove_book_from_db(message):
    book_name_to_remove = message.text
    chat_id = message.chat.id
    cursor.execute(f"DELETE FROM ratings_{str(chat_id)} WHERE book_title = '{book_name_to_remove}'")
    connection.commit()
    bot.send_message(message.chat.id, f'‚úÖ –ì–æ—Ç–æ–≤–æ! ‚úÖ\n–ö–Ω–∏–≥—É "*{book_name_to_remove}*" –≤–∏–¥–∞–ª–µ–Ω–æ —Å–ø–∏—Å–∫—É '
                                      f'—É–ª—é–±–ª–µ–Ω–∏—Ö.', parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == 'üîù –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –∫–Ω–∏–≥')
def get_favourite_books(message):
    chat_id = message.chat.id
    cursor.execute(f"SELECT * FROM ratings_{str(chat_id)} ORDER BY book_rating DESC LIMIT 10")
    top_books = cursor.fetchall()
    response = "*ü´∂ –ú–æ—ó —É–ª—é–±–ª–µ–Ω—ñ –∫–Ω–∏–≥–∏:*\n\n"
    counter = 1
    for book in top_books:
        response += f"{counter}) üìñ *{book[1]}*\n    ü§µ{book[2]}\n    ‚≠ê {book[3]}\n\n"
        counter += 1
    # with open('images/istockphoto-1370405901-612x612.jpg', 'rb') as photo:
    #     bot.send_photo(message.chat.id, photo, caption=response, parse_mode='Markdown')
    bot.send_message(message.chat.id, response, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == 'ü™Ñ –ü–æ—Ä–∞–¥–∏—Ç–∏ –∫–Ω–∏–≥—É')
def recommend_book(message):
    bot_message = bot.send_message(message.chat.id, 'üí™ –õ–µ–≥–∫–æ) üí™\n–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –∫–Ω–∏–≥–∏ (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é), —è–∫–∞ —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞–ª–∞—Å—è —ñ —è –ø—ñ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±–µ —Å—Ö–æ–∂—ñ ü™Ñ')
    bot.register_next_step_handler(bot_message, get_recommendation)


def get_recommendation(message):
    book_name = message.text

    try:
        recommended_books = find_similar_books(book_name)
    except IncorrectBookIndex:
        bot.send_message(message.chat.id, "üõë–û–π, –∞ —â–æ —Ç—Ä–∞–ø–∏–ª–æ—Å—å... üõë\n–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑", parse_mode='Markdown')
    else:
        response = "*üîù –ù–∞–π–±—ñ–ª—å—à —Å—Ö–æ–∂—ñ –∫–Ω–∏–≥–∏:*\n\n"
        counter = 1
        for key, value in recommended_books.items():
            response += f"{counter}) üìñ *{key}*\n ‚≠ê –°—Ö–æ–∂—ñ—Å—Ç—å: {value}\n\n"
            counter += 1
        bot.send_message(message.chat.id, response, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == 'üèòÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—ñ –∫–Ω–∏–∂–∫–æ–≤—ñ –º–∞–≥–∞–∑–∏–Ω–∏')
def get_user_location(message):
    bot_message = bot.send_message(message.chat.id, 'üìç –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–≤–æ—è –ª–æ–∫–∞—Ü—ñ—è üìç\n–ü–æ–¥—ñ–ª–∏—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—î—é –ª–æ–∫–∞—Ü—ñ—î—é')
    bot.register_next_step_handler(bot_message, get_nearest_book_stores)


def get_nearest_book_stores(message):
    user_lat = message.location.latitude
    user_lng = message.location.longitude
    google_map_api_url = f"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={user_lat},{user_lng}&radius=3000&type=book_store&language=uk&key={GOOGLE_MAP_API_TOKEN}"
    google_map_api_response = requests.get(google_map_api_url)
    result = json.loads(google_map_api_response.text)
    bookstores = result["results"]
    bot_response = "*üëá –û—Å—å –Ω–∞–π–±–ª–∏–∂—á—ñ –∫–Ω–∏–∂–∫–æ–≤—ñ –º–∞–≥–∞–∑–∏–Ω–∏:*\n\n"
    for bookstore in bookstores:
        name = bookstore["name"]
        address = bookstore["vicinity"]
        rating = bookstore["rating"] if "rating" in bookstore else "-"
        if "opening_hours" in bookstore:
            open_now = 'üîì –í—ñ–¥—á–∏–Ω–µ–Ω–æ' if bookstore["opening_hours"]["open_now"] else 'üîì –ó–∞—á–∏–Ω–µ–Ω–æ'
        else:
            open_now = 'üîì -'
        bot_response += f"üìö –ú–∞–≥–∞–∑–∏–Ω: {name}\n üìç –ê–¥—Ä–µ—Å–∞: {address}\n ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n {open_now}\n\n"
    bot.send_message(message.chat.id, bot_response, parse_mode='Markdown')


bot.polling(none_stop=True, interval=0)
